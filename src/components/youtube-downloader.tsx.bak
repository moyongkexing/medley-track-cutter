import { useState } from "react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { ProgressIndicator } from "@/components/progress-indicator";
import { useToast } from "@/components/ui/use-toast";

interface YouTubeDownloaderProps {
  onFileDownloaded: (file: File) => void;
}

export function YouTubeDownloader({ onFileDownloaded }: YouTubeDownloaderProps) {
  const [youtubeUrl, setYoutubeUrl] = useState("https://www.youtube.com/watch?v=bTWeuApBT-w");
  const [isDownloading, setIsDownloading] = useState(false);
  const [downloadProgress, setDownloadProgress] = useState(0);
  const { toast } = useToast();

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setYoutubeUrl(e.target.value);
  };

  const handleDownload = async () => {
    if (!youtubeUrl.trim()) {
      toast({
        title: "エラー",
        description: "YouTube URLを入力してください",
        variant: "destructive",
      });
      return;
    }

    try {
      setIsDownloading(true);
      setDownloadProgress(10); // 開始表示

      // YouTube URLをAPIに送信してダウンロード処理を開始
      const response = await fetch('/api/youtube', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ youtubeUrl }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || '動画のダウンロード中にエラーが発生しました');
      }

      setDownloadProgress(40); // 処理中表示

      const data = await response.json();

      if (!data.success) {
        throw new Error(data.error || '動画のダウンロード中にエラーが発生しました');
      }

      setDownloadProgress(60); // 動画処理完了

      // ファイルをダウンロード
      const fileResponse = await fetch(`/api/youtube?filePath=${encodeURIComponent(data.filePath)}`);
      
      if (!fileResponse.ok) {
        throw new Error('ファイルのダウンロード中にエラーが発生しました');
      }

      setDownloadProgress(80); // ファイルダウンロード中

      // ダウンロードしたファイルをBlobに変換
      const blob = await fileResponse.blob();
      
      setDownloadProgress(90); // 変換中
      
      // ファイルオブジェクトを作成
      const file = new File([blob], data.fileName, { type: 'audio/mpeg' });
      
      // 親コンポーネントにファイルを渡す
      onFileDownloaded(file);
      
      setDownloadProgress(100); // 完了
      
      toast({
        title: "成功",
        description: `${data.title} のダウンロードが完了しました`,
      });

      // URLをクリア
      setYoutubeUrl("");

    } catch (error) {
      console.error('Download error:', error);
      toast({
        title: "エラー",
        description: error instanceof Error ? error.message : 'ダウンロード中にエラーが発生しました',
        variant: "destructive",
      });
    } finally {
      setIsDownloading(false);
      setDownloadProgress(0);
    }
  };

  return (
    <div className="space-y-4">
      <div className="space-y-2">
        <Label htmlFor="youtube-url">YouTube URL</Label>
        <div className="flex space-x-2">
          <Input
            id="youtube-url"
            placeholder="https://www.youtube.com/watch?v=..."
            value={youtubeUrl}
            onChange={handleInputChange}
            disabled={isDownloading}
            className="flex-1"
          />
          <Button 
            onClick={handleDownload} 
            disabled={isDownloading || !youtubeUrl.trim()}
          >
            {isDownloading ? "ダウンロード中..." : "ダウンロード"}
          </Button>
        </div>
        <p className="text-xs text-gray-500">
          YouTube動画のURLを入力して、音声ファイルをダウンロードします。
        </p>
      </div>

      {isDownloading && (
        <ProgressIndicator
          progress={downloadProgress}
          message={
            downloadProgress < 40 ? "動画情報を取得中..." :
            downloadProgress < 60 ? "音声データを処理中..." :
            downloadProgress < 80 ? "ファイルをダウンロード中..." :
            downloadProgress < 90 ? "ファイルを変換中..." :
            downloadProgress < 100 ? "処理を完了中..." :
            "完了"
          }
          isVisible={true}
        />
      )}
    </div>
  );
}
